To automate the deployment of a Kubernetes cluster with one master node and one worker (node) on virtual machines (VMs), you can use a tool like kubeadm along with a Bash script to streamline the process. Below is a basic script that sets up a single master node and one worker node on Ubuntu-based VMs. You will need two separate VMs for this setup.

**Note:** This script assumes you are using Ubuntu as your VM operating system. You can adapt it for other Linux distributions as needed.

### Master Node Setup Script

Save this script as `setup-master.sh`:

```bash
#!/bin/bash

# Update the package list
sudo apt-get update

# Install required packages
sudo apt-get install -y apt-transport-https curl

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER
sudo systemctl enable docker

# Install kubeadm, kubelet, and kubectl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubeadm kubelet kubectl

# Initialize the Kubernetes cluster (as root)
sudo kubeadm init --pod-network-cidr=10.244.0.0/16

# Set up kubectl for your regular user
mkdir -p $HOME/.kube
sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
sudo chown $(id -u):$(id -g) $HOME/.kube/config

# Install a network plugin (Calico in this example)
kubectl apply -f https://docs.projectcalico.org/v3.19/manifests/calico.yaml

# Print the kubeadm join command for worker node
kubeadm token create --print-join-command > join-command.sh

echo "Master node is initialized. Save the join-command.sh script and run it on the worker node to join the cluster."
```

### Worker Node Setup Script

Save this script as `setup-worker.sh`:

```bash
#!/bin/bash

# Update the package list
sudo apt-get update

# Install required packages
sudo apt-get install -y apt-transport-https curl

# Install Docker
curl -fsSL https://get.docker.com -o get-docker.sh
sudo sh get-docker.sh
sudo usermod -aG docker $USER
sudo systemctl enable docker

# Install kubeadm, kubelet, and kubectl
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
echo "deb https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list
sudo apt-get update
sudo apt-get install -y kubeadm kubelet kubectl

# Run the kubeadm join command provided by the master node (replace with your actual join-command.sh)
bash join-command.sh

echo "Worker node has joined the cluster."
```

Here's how these scripts work:

- The **Master Node Setup Script** installs Docker, Kubernetes tools (`kubeadm`, `kubelet`, and `kubectl`), initializes the Kubernetes cluster on the master node, sets up `kubectl` configuration for the regular user, installs a network plugin (Calico in this example), and generates a script (`join-command.sh`) containing the command to join worker nodes to the cluster.

- The **Worker Node Setup Script** installs Docker and Kubernetes tools, then runs the `join-command.sh` script generated on the master node to join the worker node to the cluster.

Before running these scripts:

1. Replace `join-command.sh` in the worker node script with the actual file generated by the master node.

2. Make sure you have two separate VMs (one for the master and one for the worker), and they have network connectivity between them.

3. Ensure you have sudo privileges on both VMs.

4. Review the scripts to ensure they match your environment and requirements.

After running the master and worker node scripts, you should have a basic Kubernetes cluster with one master and one worker node set up.
